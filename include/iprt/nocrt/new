/** @file
 * IPRT / No-CRT - Our own new header.
 */

/*
 * Copyright (C) 2006-2022 Oracle Corporation
 *
 * This file is part of VirtualBox Open Source Edition (OSE), as
 * available from http://www.virtualbox.org. This file is free software;
 * you can redistribute it and/or modify it under the terms of the GNU
 * General Public License (GPL) as published by the Free Software
 * Foundation, in version 2 as it comes in the "COPYING" file of the
 * VirtualBox OSE distribution. VirtualBox OSE is distributed in the
 * hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
 *
 * The contents of this file may alternatively be used under the terms
 * of the Common Development and Distribution License Version 1.0
 * (CDDL) only, as it comes in the "COPYING.CDDL" file of the
 * VirtualBox OSE distribution, in which case the provisions of the
 * CDDL are applicable instead of those of the GPL.
 *
 * You may elect to license modified versions of this file under the
 * terms and conditions of either the GPL or the CDDL or both.
 */

#ifndef IPRT_INCLUDED_nocrt_new
#define IPRT_INCLUDED_nocrt_new
#ifndef RT_WITHOUT_PRAGMA_ONCE
# pragma once
#endif

#include <iprt/types.h>


/** MSC declares the operators as cdecl it seems. */
#ifdef _MSC_VER
# define RT_NEW_DELETE_CDECL                    __cdecl
#else
# define RT_NEW_DELETE_CDECL
#endif

/** MSC doesn't use the standard namespace. */
#ifdef _MSC_VER
# define RT_NEW_DELETE_SIZE_T                   size_t
#else
# define RT_NEW_DELETE_SIZE_T                   std::size_t
#endif

/** The hint that we're throwing std::bad_alloc is not apprecitated by MSC. */
#ifdef RT_EXCEPTIONS_ENABLED
# ifdef _MSC_VER
#  define RT_NEW_DELETE_THROWS_BAD_ALLOC
#  define RT_NEW_DELETE_NOTHROW                 RT_NO_THROW_DEF
# else
#  ifdef _GLIBCXX_THROW
#   define RT_NEW_DELETE_THROWS_BAD_ALLOC       _GLIBCXX_THROW(std::bad_alloc)
#  elif defined(__cplusplus) && (__cplusplus + 0) < 201700
#   define RT_NEW_DELETE_THROWS_BAD_ALLOC       throw(std::bad_alloc)
#  else
#   define RT_NEW_DELETE_THROWS_BAD_ALLOC       noexcept(false)
#  endif
#  define RT_NEW_DELETE_NOTHROW                 throw()
# endif
#else  /* !RT_EXCEPTIONS_ENABLED */
# define RT_NEW_DELETE_THROWS_BAD_ALLOC
# define RT_NEW_DELETE_NOTHROW
#endif /* !RT_EXCEPTIONS_ENABLED */


#ifdef IPRT_NO_CRT

namespace std
{
    struct nothrow_t
    {
        explicit nothrow_t()
        {}
    };
}


void *RT_NEW_DELETE_CDECL operator new(RT_NEW_DELETE_SIZE_T cb) RT_NEW_DELETE_THROWS_BAD_ALLOC;
void *RT_NEW_DELETE_CDECL operator new(RT_NEW_DELETE_SIZE_T cb, const std::nothrow_t &) RT_NEW_DELETE_NOTHROW;
void RT_NEW_DELETE_CDECL operator delete(void *pv) RT_NEW_DELETE_NOTHROW;
#ifdef __cpp_sized_deallocation
void RT_NEW_DELETE_CDECL operator delete(void *pv, RT_NEW_DELETE_SIZE_T cb) RT_NEW_DELETE_NOTHROW;
#endif
void RT_NEW_DELETE_CDECL operator delete(void *pv, const std::nothrow_t &) RT_NEW_DELETE_NOTHROW;


void *RT_NEW_DELETE_CDECL operator new[](RT_NEW_DELETE_SIZE_T cb) RT_NEW_DELETE_THROWS_BAD_ALLOC;
void *RT_NEW_DELETE_CDECL operator new[](RT_NEW_DELETE_SIZE_T cb, const std::nothrow_t &) RT_NEW_DELETE_NOTHROW;
void RT_NEW_DELETE_CDECL operator delete[](void * pv) RT_NEW_DELETE_NOTHROW;
#ifdef __cpp_sized_deallocation
void RT_NEW_DELETE_CDECL operator delete[](void * pv, RT_NEW_DELETE_SIZE_T cb) RT_NEW_DELETE_NOTHROW;
#endif
void RT_NEW_DELETE_CDECL operator delete[](void *pv, const std::nothrow_t &) RT_NEW_DELETE_NOTHROW;


#else  /* IPRT_NO_CRT */
# include <new>
#endif /* IPRT_NO_CRT */

#endif /* !IPRT_INCLUDED_nocrt_new */

