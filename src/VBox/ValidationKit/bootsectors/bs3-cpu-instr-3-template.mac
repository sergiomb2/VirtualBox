; $Id$
;; @file
; BS3Kit - bs3-cpu-instr-3 - MMX, SSE and AVX instructions, assembly template.
;

;
; Copyright (C) 2007-2022 Oracle Corporation
;
; This file is part of VirtualBox Open Source Edition (OSE), as
; available from http://www.virtualbox.org. This file is free software;
; you can redistribute it and/or modify it under the terms of the GNU
; General Public License (GPL) as published by the Free Software
; Foundation, in version 2 as it comes in the "COPYING" file of the
; VirtualBox OSE distribution. VirtualBox OSE is distributed in the
; hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
;
; The contents of this file may alternatively be used under the terms
; of the Common Development and Distribution License Version 1.0
; (CDDL) only, as it comes in the "COPYING.CDDL" file of the
; VirtualBox OSE distribution, in which case the provisions of the
; CDDL are applicable instead of those of the GPL.
;
; You may elect to license modified versions of this file under the
; terms and conditions of either the GPL or the CDDL or both.
;


;*********************************************************************************************************************************
;*  Header Files                                                                                                                 *
;*********************************************************************************************************************************
%include "bs3kit-template-header.mac"   ; setup environment


;*********************************************************************************************************************************
;*  External Symbols                                                                                                             *
;*********************************************************************************************************************************
TMPL_BEGIN_TEXT


;
; Test code snippets containing code which differs between 16-bit, 32-bit
; and 64-bit CPUs modes.
;
%ifdef BS3_INSTANTIATING_CMN


;;
; Variant on BS3_PROC_BEGIN_CMN w/ BS3_PBC_NEAR that prefixes the function
; with an instruction length byte.
;
; ASSUMES the length is between the start of the function and the .again label.
;
 %ifndef BS3CPUINSTR3_PROC_BEGIN_CMN_DEFINED
  %define BS3CPUINSTR3_PROC_BEGIN_CMN_DEFINED
  %macro BS3CPUINSTR3_PROC_BEGIN_CMN 1
        align   8, db 0cch
        db      BS3_CMN_NM(%1).again - BS3_CMN_NM(%1)
BS3_PROC_BEGIN_CMN %1, BS3_PBC_NEAR
  %endmacro
 %endif

;;
; The EMIT_INSTR_PLUS_ICEBP macros is for creating a common function for and
; named after a single instruction, followed by a looping ICEBP.
;
; This works like a prefix to the instruction invocation, only exception is that
; instead of [fs:xBX] you write FSxBS as that's what is wanted in the name.
;
 %ifndef EMIT_INSTR_PLUS_ICEBP_DEFINED
  %define EMIT_INSTR_PLUS_ICEBP_DEFINED

  %macro EMIT_INSTR_PLUS_ICEBP 2
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _ %+ %2 %+ _icebp
   %define FSxBX [fs:xBX]
        %1      %2
   %undef  FSxBX
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN            bs3CpuInstr3_ %+ %1 %+ _ %+ %2 %+ _icebp
  %endmacro

  %macro EMIT_INSTR_PLUS_ICEBP 3
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _ %+ %2 %+ _ %+ %3 %+ _icebp
   %define FSxBX [fs:xBX]
        %1      %2, %3
   %undef  FSxBX
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN            bs3CpuInstr3_ %+ %1 %+ _ %+ %2 %+ _ %+ %3 %+ _icebp
  %endmacro

  %macro EMIT_INSTR_PLUS_ICEBP 4
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _ %+ %2 %+ _ %+ %3 %+ _ %+ %4 %+ _icebp
   %define FSxBX [fs:xBX]
        %1      %2, %3, %4
   %undef  FSxBX
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN            bs3CpuInstr3_ %+ %1 %+ _ %+ %2 %+ _ %+ %3 %+ _ %+ %4 %+ _icebp
  %endmacro

  %macro EMIT_INSTR_PLUS_ICEBP 5
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _ %+ %2 %+ _ %+ %3 %+ _ %+ %4 %+ _ %+ %5 %+ _icebp
   %define FSxBX [fs:xBX]
        %1      %2, %3, %4, %5
   %undef  FSxBX
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN            bs3CpuInstr3_ %+ %1 %+ _ %+ %2 %+ _ %+ %3 %+ _ %+ %4 %+ _ %+ %5 %+ _icebp
  %endmacro

 %endif



%ifndef EMIT_TYPE1_INSTR_DEFINED
 %define EMIT_TYPE1_INSTR_DEFINED
 ;; @param 7 Indicates whether the 2nd and 3rd pair has MMX variants.
 %macro EMIT_TYPE1_INSTR 7
;
; PXOR (SSE2) & VPXOR (AVX2)
;
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _MM1_MM2_icebp
        %1      mm1, mm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _MM1_MM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _MM1_FSxBX_icebp
        %1      mm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _MM1_FSxBX_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _XMM1_XMM2_icebp
        %1      xmm1, xmm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _XMM1_XMM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _XMM1_FSxBX_icebp
        %1      xmm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _XMM1_FSxBX_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _XMM1_XMM1_XMM2_icebp
        %2      xmm1, xmm1, xmm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _XMM1_XMM1_XMM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _XMM1_XMM1_FSxBX_icebp
        %2      xmm1, xmm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _XMM1_XMM1_FSxBX_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _YMM7_YMM2_YMM3_icebp
        %2      ymm7, ymm2, ymm3
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _YMM7_YMM2_YMM3_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _YMM7_YMM2_FSxBX_icebp
        %2      ymm7, ymm2, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _YMM7_YMM2_FSxBX_icebp


;
; XORPS (SSE2) & VXORPS (AVX)
;
 %if %7 != 0
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %3 %+ _MM1_MM2_icebp
        %3      mm1, mm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %3 %+ _MM1_MM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %3 %+ _MM1_FSxBX_icebp
        %3      mm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %3 %+ _MM1_FSxBX_icebp
 %endif

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %3 %+ _XMM1_XMM2_icebp
        %3      xmm1, xmm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %3 %+ _XMM1_XMM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %3 %+ _XMM1_FSxBX_icebp
        %3      xmm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %3 %+ _XMM1_FSxBX_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %4 %+ _XMM1_XMM1_XMM2_icebp
        %4        xmm1, xmm1, xmm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %4 %+ _XMM1_XMM1_XMM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %4 %+ _XMM1_XMM1_FSxBX_icebp
        %4        xmm1, xmm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %4 %+ _XMM1_XMM1_FSxBX_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %4 %+ _YMM1_YMM1_YMM2_icebp
        %4        ymm1, ymm1, ymm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %4 %+ _YMM1_YMM1_YMM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %4 %+ _YMM1_YMM1_FSxBX_icebp
        %4        ymm1, ymm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %4 %+ _YMM1_YMM1_FSxBX_icebp



;
; XORPD (SSE2) & VXORPD (AVX)
;
 %if %7 != 0
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %5 %+ _MM1_MM2_icebp
        %5      mm1, mm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %5 %+ _MM1_MM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %5 %+ _MM1_FSxBX_icebp
        %5      mm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %5 %+ _MM1_FSxBX_icebp
 %endif

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %5 %+ _XMM1_XMM2_icebp
        %5      xmm1, xmm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %5 %+ _XMM1_XMM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %5 %+ _XMM1_FSxBX_icebp
        %5      xmm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %5 %+ _XMM1_FSxBX_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %6 %+ _XMM2_XMM1_XMM0_icebp
        %6        xmm2, xmm1, xmm0
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %6 %+ _XMM2_XMM1_XMM0_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %6 %+ _XMM2_XMM1_FSxBX_icebp
        %6        xmm2, xmm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %6 %+ _XMM2_XMM1_FSxBX_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %6 %+ _YMM2_YMM1_YMM0_icebp
        %6        ymm2, ymm1, ymm0
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %6 %+ _YMM2_YMM1_YMM0_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %6 %+ _YMM2_YMM1_FSxBX_icebp
        %6        ymm2, ymm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %6 %+ _YMM2_YMM1_FSxBX_icebp

  %if TMPL_BITS == 64
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %6 %+ _YMM10_YMM8_YMM15_icebp
        %6        ymm10, ymm8, ymm15
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %6 %+ _YMM10_YMM8_YMM15_icebp
  %endif

 %endmacro  ; EMIT_TYPE1_INSTR

 %macro EMIT_TYPE1_ONE_INSTR 3
  %if %3 != 0
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _MM1_MM2_icebp
        %1      mm1, mm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _MM1_MM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _MM1_FSxBX_icebp
        %1      mm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _MM1_FSxBX_icebp
  %endif

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _XMM1_XMM2_icebp
        %1      xmm1, xmm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _XMM1_XMM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _XMM1_FSxBX_icebp
        %1      xmm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _XMM1_FSxBX_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _XMM2_XMM1_XMM0_icebp
        %2        xmm2, xmm1, xmm0
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _XMM2_XMM1_XMM0_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _XMM2_XMM1_FSxBX_icebp
        %2        xmm2, xmm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _XMM2_XMM1_FSxBX_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _YMM2_YMM1_YMM0_icebp
        %2        ymm2, ymm1, ymm0
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _YMM2_YMM1_YMM0_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _YMM2_YMM1_FSxBX_icebp
        %2        ymm2, ymm1, [fs:xBX]
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _YMM2_YMM1_FSxBX_icebp

  %if TMPL_BITS == 64
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _YMM10_YMM8_YMM15_icebp
        %2        ymm10, ymm8, ymm15
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _YMM10_YMM8_YMM15_icebp
  %endif
 %endmacro ; EMIT_TYPE1_ONE_INSTR

%endif

EMIT_TYPE1_INSTR pand,  vpand,  andps,  vandps,  andpd,  vandpd,  0
EMIT_TYPE1_INSTR pandn, vpandn, andnps, vandnps, andnpd, vandnpd, 0
EMIT_TYPE1_INSTR por,   vpor,   orps,   vorps,   orpd,   vorpd,   0
EMIT_TYPE1_INSTR pxor,  vpxor,  xorps,  vxorps,  xorpd,  vxorpd,  0

EMIT_TYPE1_INSTR pcmpgtb, vpcmpgtb, pcmpgtw, vpcmpgtw, pcmpgtd, vpcmpgtd, 1
EMIT_TYPE1_ONE_INSTR pcmpgtq, vpcmpgtq, 0
EMIT_TYPE1_INSTR pcmpeqb, vpcmpeqb, pcmpeqw, vpcmpeqw, pcmpeqd, vpcmpeqd, 1
EMIT_TYPE1_ONE_INSTR pcmpeqq, vpcmpeqq, 0

EMIT_TYPE1_INSTR paddb, vpaddb, paddw, vpaddw, paddd, vpaddd, 1
EMIT_TYPE1_ONE_INSTR paddq, vpaddq, 1

EMIT_TYPE1_INSTR psubb, vpsubb, psubw, vpsubw, psubd, vpsubd, 1
EMIT_TYPE1_ONE_INSTR psubq, vpsubq, 1


;
; Type 2 instructions.  On the form: pxxxx sAX, [zy]mm0
;
%ifndef EMIT_TYPE2_ONE_INSTR_DEFINED
 %define EMIT_TYPE2_ONE_INSTR_DEFINED
 ;; @param 1    MMX/SSE instruction name
 ;; @param 2    AVX instruction name
 ;; @param 3    Whether to emit MMX function
 ;; @param 4    The opcode byte. (assuming two byte / vex map 1)
 %macro EMIT_TYPE2_ONE_INSTR 4
  %if %3 != 0
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _EAX_MM2_icebp
        %1      eax, mm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _EAX_MM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _EAX_qword_FSxBX_icebp
  %if TMPL_BITS == 16
        db      64h, 0fh, %4, 7 ; %1      eax, qword [fs:xBX]
  %else
        db      64h, 0fh, %4, 3 ; %1      eax, qword [fs:xBX]
  %endif
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _EAX_qword_FSxBX_icebp
  %endif

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _EAX_XMM2_icebp
        %1      eax, xmm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _EAX_XMM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %1 %+ _EAX_dqword_FSxBX_icebp
  %if TMPL_BITS == 16
        db      64h, 66h, 0fh, %4, 7 ; %1      eax, dqword [fs:xBX]
  %else
        db      64h, 66h, 0fh, %4, 3 ; %1      eax, dqword [fs:xBX]
  %endif
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %1 %+ _EAX_dqword_FSxBX_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _EAX_XMM2_icebp
        %2      eax, xmm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _EAX_XMM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _EAX_dqword_FSxBX_icebp
  %if TMPL_BITS == 16
        db      64h, 0c4h, 0e0h, 071h, %4, 7 ; %2      eax, dqword [fs:xBX]
  %else
        db      64h, 0c4h, 0e0h, 071h, %4, 3 ; %2      eax, dqword [fs:xBX]
  %endif
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _EAX_dqword_FSxBX_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _EAX_YMM2_icebp
        %2        eax, ymm2
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _EAX_YMM2_icebp

BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _EAX_qqword_FSxBX_icebp
  %if TMPL_BITS == 16
        db      64h, 0c4h, 0e0h, 075h, %4, 7 ; %2      eax, qqword [fs:xBX]
  %else
        db      64h, 0c4h, 0e0h, 075h, %4, 3 ; %2      eax, qqword [fs:xBX]
  %endif
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _EAX_qqword_FSxBX_icebp

  %if TMPL_BITS == 64
BS3CPUINSTR3_PROC_BEGIN_CMN bs3CpuInstr3_ %+ %2 %+ _RAX_YMM9_icebp
        %2        rax, ymm9
.again:
        icebp
        jmp     .again
BS3_PROC_END_CMN   bs3CpuInstr3_ %+ %2 %+ _RAX_YMM9_icebp
  %endif
 %endmacro ; EMIT_TYPE2_ONE_INSTR
%endif

EMIT_TYPE2_ONE_INSTR pmovmskb, vpmovmskb, 1, 0d7h

;
; [V]PSHUFB
;
EMIT_INSTR_PLUS_ICEBP   pshufb, MM1, MM2
EMIT_INSTR_PLUS_ICEBP   pshufb, MM1, FSxBX

EMIT_INSTR_PLUS_ICEBP   pshufb, XMM1, XMM2
EMIT_INSTR_PLUS_ICEBP   pshufb, XMM1, FSxBX
 %if TMPL_BITS == 64
EMIT_INSTR_PLUS_ICEBP   pshufb, XMM8, XMM9
EMIT_INSTR_PLUS_ICEBP   pshufb, XMM8, FSxBX
 %endif

EMIT_INSTR_PLUS_ICEBP   vpshufb, XMM1, XMM2, XMM3
EMIT_INSTR_PLUS_ICEBP   vpshufb, XMM1, XMM2, FSxBX
 %if TMPL_BITS == 64
EMIT_INSTR_PLUS_ICEBP   vpshufb, XMM8, XMM9, XMM10
EMIT_INSTR_PLUS_ICEBP   vpshufb, XMM8, XMM9, FSxBX
 %endif

EMIT_INSTR_PLUS_ICEBP   vpshufb, YMM1, YMM2, YMM3
EMIT_INSTR_PLUS_ICEBP   vpshufb, YMM1, YMM2, FSxBX
 %if TMPL_BITS == 64
EMIT_INSTR_PLUS_ICEBP   vpshufb, YMM8, YMM9, YMM10
EMIT_INSTR_PLUS_ICEBP   vpshufb, YMM8, YMM9, FSxBX
 %endif

;
; PSHUFW
;
EMIT_INSTR_PLUS_ICEBP   pshufw, MM1, MM2,   0FFh        ; FF = top src word in all destination words
EMIT_INSTR_PLUS_ICEBP   pshufw, MM1, FSxBX, 0FFh
EMIT_INSTR_PLUS_ICEBP   pshufw, MM1, MM2,   01Bh        ; 1B = word swap (like bswap but for words)
EMIT_INSTR_PLUS_ICEBP   pshufw, MM1, FSxBX, 01Bh

;
; [V]PSHUFHW
;
EMIT_INSTR_PLUS_ICEBP   pshufhw, XMM1, XMM2,  0FFh
EMIT_INSTR_PLUS_ICEBP   pshufhw, XMM1, FSxBX, 0FFh
EMIT_INSTR_PLUS_ICEBP   pshufhw, XMM1, XMM2,  01Bh
EMIT_INSTR_PLUS_ICEBP   pshufhw, XMM1, FSxBX, 01Bh

EMIT_INSTR_PLUS_ICEBP   vpshufhw, XMM1, XMM2,  0FFh
EMIT_INSTR_PLUS_ICEBP   vpshufhw, XMM1, FSxBX, 0FFh
EMIT_INSTR_PLUS_ICEBP   vpshufhw, XMM1, XMM2,  01Bh
EMIT_INSTR_PLUS_ICEBP   vpshufhw, XMM1, FSxBX, 01Bh

EMIT_INSTR_PLUS_ICEBP   vpshufhw, YMM1, YMM2,  0FFh
EMIT_INSTR_PLUS_ICEBP   vpshufhw, YMM1, FSxBX, 0FFh
EMIT_INSTR_PLUS_ICEBP   vpshufhw, YMM1, YMM2,  01Bh
EMIT_INSTR_PLUS_ICEBP   vpshufhw, YMM1, FSxBX, 01Bh

 %if TMPL_BITS == 64
EMIT_INSTR_PLUS_ICEBP   vpshufhw, YMM12, YMM7, 0FFh
EMIT_INSTR_PLUS_ICEBP   vpshufhw, YMM9, YMM12, 01Bh
 %endif

;
; [V]PSHUFLW
;
EMIT_INSTR_PLUS_ICEBP   pshuflw, XMM1, XMM2,  0FFh
EMIT_INSTR_PLUS_ICEBP   pshuflw, XMM1, FSxBX, 0FFh
EMIT_INSTR_PLUS_ICEBP   pshuflw, XMM1, XMM2,  01Bh
EMIT_INSTR_PLUS_ICEBP   pshuflw, XMM1, FSxBX, 01Bh

EMIT_INSTR_PLUS_ICEBP   vpshuflw, XMM1, XMM2,  0FFh
EMIT_INSTR_PLUS_ICEBP   vpshuflw, XMM1, FSxBX, 0FFh
EMIT_INSTR_PLUS_ICEBP   vpshuflw, XMM1, XMM2,  01Bh
EMIT_INSTR_PLUS_ICEBP   vpshuflw, XMM1, FSxBX, 01Bh

EMIT_INSTR_PLUS_ICEBP   vpshuflw, YMM1, YMM2,  0FFh
EMIT_INSTR_PLUS_ICEBP   vpshuflw, YMM1, FSxBX, 0FFh
EMIT_INSTR_PLUS_ICEBP   vpshuflw, YMM1, YMM2,  01Bh
EMIT_INSTR_PLUS_ICEBP   vpshuflw, YMM1, FSxBX, 01Bh

 %if TMPL_BITS == 64
EMIT_INSTR_PLUS_ICEBP   vpshuflw, YMM12, YMM7, 0FFh
EMIT_INSTR_PLUS_ICEBP   vpshuflw, YMM9, YMM12, 01Bh
 %endif

;
; [V]PSHUFD
;
EMIT_INSTR_PLUS_ICEBP   pshufd, XMM1, XMM2,  0FFh
EMIT_INSTR_PLUS_ICEBP   pshufd, XMM1, FSxBX, 0FFh
EMIT_INSTR_PLUS_ICEBP   pshufd, XMM1, XMM2,  01Bh
EMIT_INSTR_PLUS_ICEBP   pshufd, XMM1, FSxBX, 01Bh

EMIT_INSTR_PLUS_ICEBP   vpshufd, XMM1, XMM2,  0FFh
EMIT_INSTR_PLUS_ICEBP   vpshufd, XMM1, FSxBX, 0FFh
EMIT_INSTR_PLUS_ICEBP   vpshufd, XMM1, XMM2,  01Bh
EMIT_INSTR_PLUS_ICEBP   vpshufd, XMM1, FSxBX, 01Bh

EMIT_INSTR_PLUS_ICEBP   vpshufd, YMM1, YMM2,  0FFh
EMIT_INSTR_PLUS_ICEBP   vpshufd, YMM1, FSxBX, 0FFh
EMIT_INSTR_PLUS_ICEBP   vpshufd, YMM1, YMM2,  01Bh
EMIT_INSTR_PLUS_ICEBP   vpshufd, YMM1, FSxBX, 01Bh

 %if TMPL_BITS == 64
EMIT_INSTR_PLUS_ICEBP   vpshufd, YMM12, YMM7, 0FFh
EMIT_INSTR_PLUS_ICEBP   vpshufd, YMM9, YMM12, 01Bh
 %endif

%endif ; BS3_INSTANTIATING_CMN

%include "bs3kit-template-footer.mac"   ; reset environment

