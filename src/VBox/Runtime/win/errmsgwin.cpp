/* $Id$ */
/** @file
 * IPRT - Status code messages, Windows.
 */

/*
 * Copyright (C) 2006-2020 Oracle Corporation
 *
 * This file is part of VirtualBox Open Source Edition (OSE), as
 * available from http://www.virtualbox.org. This file is free software;
 * you can redistribute it and/or modify it under the terms of the GNU
 * General Public License (GPL) as published by the Free Software
 * Foundation, in version 2 as it comes in the "COPYING" file of the
 * VirtualBox OSE distribution. VirtualBox OSE is distributed in the
 * hope that it will be useful, but WITHOUT ANY WARRANTY of any kind.
 *
 * The contents of this file may alternatively be used under the terms
 * of the Common Development and Distribution License Version 1.0
 * (CDDL) only, as it comes in the "COPYING.CDDL" file of the
 * VirtualBox OSE distribution, in which case the provisions of the
 * CDDL are applicable instead of those of the GPL.
 *
 * You may elect to license modified versions of this file under the
 * terms and conditions of either the GPL or the CDDL or both.
 */


/*********************************************************************************************************************************
*   Header Files                                                                                                                 *
*********************************************************************************************************************************/
#include <iprt/win/windows.h>

#include <iprt/errcore.h>
#include <iprt/asm.h>
#include <iprt/string.h>


/*********************************************************************************************************************************
*   Defined Constants And Macros                                                                                                 *
*********************************************************************************************************************************/
#if !defined(IPRT_ERRMSG_DEFINES_ONLY) && defined(IN_RT_STATIC) /* No message text in static builds to save space. */
# define IPRT_ERRMSG_DEFINES_ONLY
#endif

#ifdef IPRT_ERRMSG_DEFINES_ONLY
# define ENTRY(a_pszMsg, a_pszDefine, a_iCode) \
    { a_pszDefine, a_pszDefine, a_iCode }
#else
# define ENTRY(a_pszMsg, a_pszDefine, a_iCode) \
    { a_pszMsg, a_pszDefine, a_iCode }
#endif


/*********************************************************************************************************************************
*   Global Variables                                                                                                             *
*********************************************************************************************************************************/
/** Array of messages.
 * The data is generated by sed scripts and sorted by errmsgwin-sorter.cpp.
 */
static const RTWINERRMSG    g_aStatusMsgs[] =
{
#if !defined(IPRT_NO_ERROR_DATA) && !defined(DOXYGEN_RUNNING)
# include "errmsgwindata-sorted.h"
#else
    { "Success.", "ERROR_SUCCESS", 0 },
#endif
};


/** Temporary buffers to format unknown messages in.
 * @{
 */
static char                 g_aszUnknownStr[8][64];
static RTWINERRMSG          g_aUnknownMsgs[8] =
{
    { &g_aszUnknownStr[0][0], &g_aszUnknownStr[0][0], 0 },
    { &g_aszUnknownStr[1][0], &g_aszUnknownStr[1][0], 0 },
    { &g_aszUnknownStr[2][0], &g_aszUnknownStr[2][0], 0 },
    { &g_aszUnknownStr[3][0], &g_aszUnknownStr[3][0], 0 },
    { &g_aszUnknownStr[4][0], &g_aszUnknownStr[4][0], 0 },
    { &g_aszUnknownStr[5][0], &g_aszUnknownStr[5][0], 0 },
    { &g_aszUnknownStr[6][0], &g_aszUnknownStr[6][0], 0 },
    { &g_aszUnknownStr[7][0], &g_aszUnknownStr[7][0], 0 },
};
/** Last used index in g_aUnknownMsgs. */
static volatile uint32_t    g_iUnknownMsgs;
/** @} */


/**
 * Looks up the message table entry for @a rc.
 *
 * @returns index into g_aStatusMsgs on success, ~(size_t)0 if not found.
 * @param   rc      The status code to locate the entry for.
 */
static size_t rtErrWinLookup(long rc)
{
    /*
     * Perform binary search (duplicate code in rtErrLookup).
     */
    size_t iStart = 0;
    size_t iEnd   = RT_ELEMENTS(g_aStatusMsgs);
    for (;;)
    {
        size_t i = iStart + (iEnd - iStart) / 2;
        long const iCode = g_aStatusMsgs[i].iCode;
        if (rc < iCode)
        {
            if (iStart < i)
                iEnd = i;
            else
                break;
        }
        else if (rc > iCode)
        {
            i++;
            if (i < iEnd)
                iStart = i;
            else
                break;
        }
        else
            return i;
    }

#ifdef RT_STRICT
    for (size_t i = 0; i < RT_ELEMENTS(g_aStatusMsgs); i++)
        Assert(g_aStatusMsgs[i].iCode != rc);
#endif

    return ~(size_t)0;
}


RTDECL(bool)    RTErrWinIsKnown(long rc)
{
    if (rtErrWinLookup(rc) != ~(size_t)0)
        return true;
    if (SCODE_FACILITY(rc) == FACILITY_WIN32)
    {
        if (rtErrWinLookup(HRESULT_CODE(rc)) != ~(size_t)0)
            return true;
    }
    return false;
}


RTDECL(ssize_t) RTErrWinQueryDefine(long rc, char *pszBuf, size_t cbBuf, bool fFailIfUnknown)
{
    size_t i = rtErrWinLookup(rc);
    if (i != ~(size_t)0)
    {
        size_t cch = strlen(g_aStatusMsgs[i].pszDefine);
        if (cch < cbBuf)
        {
            memcpy(pszBuf, g_aStatusMsgs[i].pszDefine, cch + 1);
            return cch;
        }
        if (cbBuf)
        {
            memcpy(pszBuf, g_aStatusMsgs[i].pszDefine, cbBuf);
            pszBuf[cbBuf - 1] = '\0';
        }
        return VERR_BUFFER_OVERFLOW;
    }

    /*
     * If FACILITY_WIN32 kind of status, look up the win32 code.
     */
    if (   SCODE_FACILITY(rc) == FACILITY_WIN32
        && (i = rtErrWinLookup(HRESULT_CODE(rc))) != ~(size_t)0)
    {
        /* Append the incoming rc, so we know it's not a regular WIN32 status: */
        ssize_t cchRet = RTStrPrintf2(pszBuf, cbBuf, "%s/0x%x", g_aStatusMsgs[i].pszDefine, rc);
        return cchRet >= 0 ? cchRet : VERR_BUFFER_OVERFLOW;
    }

    if (fFailIfUnknown)
        return VERR_NOT_FOUND;
    return RTStrFormatU32(pszBuf, cbBuf, rc, 16, 0, 0, RTSTR_F_SPECIAL);
}


RTDECL(size_t)  RTErrWinFormatDefine(long rc, PFNRTSTROUTPUT pfnOutput, void *pvArgOutput, char *pszTmp, size_t cbTmp)
{
    RT_NOREF(pszTmp, cbTmp);
    size_t i = rtErrWinLookup(rc);
    if (i != ~(size_t)0)
        return pfnOutput(pvArgOutput, g_aStatusMsgs[i].pszDefine, strlen(g_aStatusMsgs[i].pszDefine));

    /*
     * If FACILITY_WIN32 kind of status, look up the win32 code.
     */
    if (SCODE_FACILITY(rc) == FACILITY_WIN32)
    {
        i = rtErrWinLookup(HRESULT_CODE(rc));
        if (i != ~(size_t)0)
            /* Append the incoming rc, so we know it's not a regular WIN32 status: */
            return RTStrFormat(pfnOutput, pvArgOutput, NULL, NULL, "%s/0x%x", g_aStatusMsgs[i].pszDefine, rc);
    }

    return RTStrFormat(pfnOutput, pvArgOutput, NULL, NULL, "0x%x", rc);
}


RTDECL(size_t)  RTErrWinFormatMsg(   long rc, PFNRTSTROUTPUT pfnOutput, void *pvArgOutput, char *pszTmp, size_t cbTmp)
{
    RT_NOREF(pszTmp, cbTmp);
#ifdef IPRT_ERRMSG_DEFINES_ONLY
    return RTErrWinFormatDefine(rc, pfnOutput, pvArgOutput, pszTmp, cbTmp);
#else
    size_t i = rtErrWinLookup(rc);
    if (i != ~(size_t)0)
        return pfnOutput(pvArgOutput, g_aStatusMsgs[i].pszMsgFull, strlen(g_aStatusMsgs[i].pszMsgFull));

    /*
     * If FACILITY_WIN32 kind of status, look up the win32 code.
     */
    if (SCODE_FACILITY(rc) == FACILITY_WIN32)
    {
        i = rtErrWinLookup(HRESULT_CODE(rc));
        if (i != ~(size_t)0)
            /* Append the incoming rc, so we know it's not a regular WIN32 status: */
            return RTStrFormat(pfnOutput, pvArgOutput, NULL, NULL, "%s/0x%x", g_aStatusMsgs[i].pszDefine, rc);
    }
    return RTStrFormat(pfnOutput, pvArgOutput, NULL, NULL, "Unknown Status 0x%x", rc);
#endif
}


RTDECL(size_t)  RTErrWinFormatMsgAll(long rc, PFNRTSTROUTPUT pfnOutput, void *pvArgOutput, char *pszTmp, size_t cbTmp)
{
    RT_NOREF(pszTmp, cbTmp);
    size_t i = rtErrWinLookup(rc);
    if (i != ~(size_t)0)
#ifdef IPRT_ERRMSG_DEFINES_ONLY
        return RTStrFormat(pfnOutput, pvArgOutput, NULL, NULL, "%s (0x%x)", g_aStatusMsgs[i].pszDefine, rc, g_aStatusMsgs[i].pszMsgFull);
#else
        return RTStrFormat(pfnOutput, pvArgOutput, NULL, NULL, "%s (0x%x) - %s", g_aStatusMsgs[i].pszDefine, rc, g_aStatusMsgs[i].pszMsgFull);
#endif

    /*
     * If FACILITY_WIN32 kind of status, look up the win32 code.
     */
    if (SCODE_FACILITY(rc) == FACILITY_WIN32)
    {
        i = rtErrWinLookup(HRESULT_CODE(rc));
        if (i != ~(size_t)0)
#ifdef IPRT_ERRMSG_DEFINES_ONLY
            return RTStrFormat(pfnOutput, pvArgOutput, NULL, NULL, "%s (0x%x)", g_aStatusMsgs[i].pszDefine, rc, g_aStatusMsgs[i].pszMsgFull);
#else
            return RTStrFormat(pfnOutput, pvArgOutput, NULL, NULL, "%s (0x%x) - %s", g_aStatusMsgs[i].pszDefine, rc, g_aStatusMsgs[i].pszMsgFull);
#endif
    }
    return RTStrFormat(pfnOutput, pvArgOutput, NULL, NULL, "Unknown Status 0x%x", rc);
}

